import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from services.handlers import register_handlers
from services.ai_service import is_openai_available
from database.database_service import db_service
from dotenv import load_dotenv
import os

load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_KEY = os.getenv('OPENAI_API_KEY')

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

if not TELEGRAM_TOKEN:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    exit(1)

if not OPENAI_KEY:
    logger.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò–ò-—Ä–µ–∂–∏–º –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

register_handlers(dp, bot)


async def on_startup():
    logger.info("ü§ñ –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫ v2.0 –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    try:
        logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite...")

        db_stats = db_service.get_database_stats()
        logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞: {db_stats['total_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {db_stats['total_tests']} —Ç–µ—Å—Ç–æ–≤")

        ai_available = await is_openai_available()
        if ai_available:
            logger.info("‚úÖ OpenAI API –¥–æ—Å—Ç—É–ø–µ–Ω - –ò–ò-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω")
        else:
            logger.warning("‚ùå OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º")

        logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise


async def on_shutdown():
    logger.info("üõë –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")

    try:
        backup_path = db_service.backup_database("shutdown_backup.db")
        if backup_path:
            logger.info(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")

        await bot.session.close()
        logger.info("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")


async def main():
    try:
        await on_startup()
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await on_shutdown()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")