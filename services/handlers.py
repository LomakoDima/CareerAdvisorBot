from aiogram import types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command
from .keyboards import *
from .professions_service import professions_service
from .ai_service import get_ai_career_recommendation, is_openai_available
from .profile_service import ProfileService
from .achievements_service import AchievementsService
import json
import time
import random
from datetime import datetime

class CareerStates(StatesGroup):
    main_menu = State()
    choosing_mode = State()
    choosing_audience = State()
    choosing_interest = State()
    choosing_people_tech = State()
    choosing_risk = State()
    ai_chat = State()
    show_results = State()


def register_handlers(dp, bot):
    @dp.callback_query(F.data == "resume_tips")
    async def show_resume_tips(callback: types.CallbackQuery):
        back_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ª–µ–∑–Ω–æ–º—É", callback_data="back_to_useful")]
        ])

        await callback.message.edit_text(
            "üìù <b>–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–∑—é–º–µ:</b>\n\n"
            "üìÑ <b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—é–º–µ:</b>\n"
            "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            "‚Ä¢ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n"
            "‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)\n"
            "‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏\n"
            "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
            "‚úÖ <b>–°–æ–≤–µ—Ç—ã:</b>\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã\n"
            "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ –∫–∞–∂–¥—É—é –≤–∞–∫–∞–Ω—Å–∏—é\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é\n"
            "‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 1-2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n\n"
            "‚ùå <b>–ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å:</b>\n"
            "‚Ä¢ –§–æ—Ç–æ (–µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)\n"
            "‚Ä¢ –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–≤–æ–∑—Ä–∞—Å—Ç, —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ)\n"
            "‚Ä¢ –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è\n"
            "‚Ä¢ –®—Ä–∏—Ñ—Ç—ã –º–µ–Ω—å—à–µ 11pt",
            reply_markup=back_kb,
            parse_mode="HTML"
        )

    @dp.callback_query(F.data == "useful_sites")
    async def show_useful_sites(callback: types.CallbackQuery):
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        back_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ª–µ–∑–Ω–æ–º—É", callback_data="back_to_useful")]
        ])

        await callback.message.edit_text(
            "üîó <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å–∞–π—Ç—ã –¥–ª—è –∫–∞—Ä—å–µ—Ä—ã:</b>\n\n"
            "üíº <b>–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã:</b>\n"
            "‚Ä¢ hh.ru - –∫—Ä—É–ø–Ω–µ–π—à–∏–π –ø–æ—Ä—Ç–∞–ª –≤–∞–∫–∞–Ω—Å–∏–π\n"
            "‚Ä¢ superjob.ru - –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞\n"
            "‚Ä¢ rabota.ru - –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º\n"
            "‚Ä¢ linkedin.com - –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —Å–µ—Ç—å\n"
            "‚Ä¢ glassdoor.com - –æ—Ç–∑—ã–≤—ã –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö\n\n"
            "üéì <b>–û–±—É—á–µ–Ω–∏–µ:</b>\n"
            "‚Ä¢ coursera.org - –æ–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ã\n"
            "‚Ä¢ udemy.com - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã\n"
            "‚Ä¢ skillbox.ru - IT –∏ –¥–∏–∑–∞–π–Ω\n"
            "‚Ä¢ netology.ru - —Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏\n"
            "‚Ä¢ stepik.org - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã\n\n"
            "üìä <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ:</b>\n"
            "‚Ä¢ habr.com - IT-—Å–æ–æ–±—â–µ—Å—Ç–≤–æ\n"
            "‚Ä¢ vc.ru - –±–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã\n"
            "‚Ä¢ ted.com - –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –ª–µ–∫—Ü–∏–∏\n"
            "‚Ä¢ medium.com - —Å—Ç–∞—Ç—å–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤\n\n"
            "üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n"
            "‚Ä¢ zarplata.ru - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç\n"
            "‚Ä¢ trud.com - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º",
            reply_markup=back_kb,
            parse_mode="HTML"
        )

    @dp.message(CareerStates.main_menu)
    async def handle_main_menu(message: types.Message, state: FSMContext):
        text = message.text

        if "üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç" in text:
            await choose_test_mode(message, state)
        elif "üìä –¢–æ–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–π" in text:
            await show_top_professions(message, state)
        elif "üí∞ –ü–æ –∑–∞—Ä–ø–ª–∞—Ç–µ" in text:
            await show_salary_filter(message, state)
        elif "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" in text:  # –ù–û–í–û–ï
            await show_profile(message, state)
        elif "üìö –ü–æ–ª–µ–∑–Ω–æ–µ" in text:
            await show_useful_info(message, state)
        elif "‚ÑπÔ∏è –û –±–æ—Ç–µ" in text:
            await show_about(message, state)

    async def show_profile(message: types.Message, state: FSMContext):
        user_id = str(message.from_user.id)
        profile = ProfileService.get_user_profile(user_id)

        username = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        created_date = datetime.fromisoformat(profile["created_at"]).strftime("%d.%m.%Y")

        await message.answer(
            f"üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç - {username}</b>\n\n"
            f"üìÖ –° –Ω–∞–º–∏ —Å: {created_date}\n"
            f"üéØ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {profile['stats']['total_tests']}\n"
            f"ü§ñ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {profile['stats']['ai_consultations']}\n"
            f"‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: {len(profile['favorites'])}\n\n"
            f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_profile_kb(),
            parse_mode="HTML"
        )

    @dp.callback_query(F.data == "profile_results")
    async def show_profile_results(callback: types.CallbackQuery):
        user_id = str(callback.from_user.id)
        results_text = ProfileService.get_recent_results(user_id)
        await callback.message.edit_text(results_text, parse_mode="HTML")

    @dp.callback_query(F.data == "profile_stats")
    async def show_profile_stats(callback: types.CallbackQuery):
        user_id = str(callback.from_user.id)
        stats_text = ProfileService.get_profile_stats(user_id)
        await callback.message.edit_text(stats_text, parse_mode="HTML")

    @dp.callback_query(F.data == "profile_favorites")
    async def show_profile_favorites(callback: types.CallbackQuery):
        user_id = str(callback.from_user.id)
        favorites_text = ProfileService.get_favorites(user_id)
        await callback.message.edit_text(favorites_text, parse_mode="HTML")

    @dp.callback_query(F.data == "profile_clear")
    async def clear_profile_data(callback: types.CallbackQuery):
        user_id = str(callback.from_user.id)
        ProfileService.clear_profile(user_id)
        await callback.answer("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
        await callback.message.edit_text(
            "‚úÖ <b>–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!</b>\n\n"
            "–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω—ã.\n"
            "–ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ! üöÄ",
            parse_mode="HTML"
        )

    @dp.callback_query(F.data == "add_favorite")
    async def add_to_favorites(callback: types.CallbackQuery, state: FSMContext):
        user_id = str(callback.from_user.id)
        data = await state.get_data()

        results = data.get("results", [])
        if not results:
            await callback.answer("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            return

        added = ProfileService.add_to_favorites(user_id, results[0])

        if added:
            await callback.answer("‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

            profile = ProfileService.get_user_profile(user_id)
            unlocked_achievements = AchievementsService.check_favorites_achievements(
                user_id, len(profile['favorites'])
            )

            for achievement in unlocked_achievements:
                achievement_text = AchievementsService.format_achievement_notification(achievement)
                await callback.message.answer(achievement_text, parse_mode="HTML")
        else:
            await callback.answer("üìù –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")

    async def show_classic_results(message: types.Message, state: FSMContext):
        data = await state.get_data()
        professions = professions_service.get_professions_by_preferences(
            audience=data["audience"], 
            category=data["interest"],
            with_people=data["with_people"], 
            risk=data["risk"]
        )

        if not professions:
            await message.answer("üòî –ù–µ –Ω–∞—à—ë–ª —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ –æ—Ç–≤–µ—Ç—ã!", reply_markup=get_final_kb())
            return

        await state.update_data(results=professions)

        user_id = str(message.from_user.id)
        ProfileService.save_test_result(user_id, "classic", professions, data)

        result_text = f"üéâ <b>–¢–≤–æ–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:</b>\n\n"
        for i, prof in enumerate(professions[:2], 1):
            result_text += f"<b>{i}. {prof['name']}</b>\n"
            result_text += f"üí∞ {prof['salary']} | {prof['growth']}\n"
            result_text += f"üìã {prof['desc']}\n\n"

        await message.answer(result_text, reply_markup=get_final_kb(), parse_mode="HTML")
        await state.set_state(CareerStates.show_results)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    async def generate_ai_recommendations(message: types.Message, state: FSMContext):
        typing_message = await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞—à—É –±–µ—Å–µ–¥—É –∏ –ø–æ–¥–±–∏—Ä–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏...")

        try:
            data = await state.get_data()
            context = data.get("ai_context", [])

            if len(context) < 2:
                await typing_message.delete()
                await message.answer(
                    "üìù –ú–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–±–µ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, –Ω–∞–≤—ã–∫–∞—Ö –∏ —Ü–µ–ª—è—Ö.",
                    reply_markup=get_ai_chat_kb()
                )
                return

            recommendations = await get_ai_career_recommendation(context, mode="recommend")
            await typing_message.delete()
            await state.update_data(ai_recommendations=recommendations)

            user_id = str(message.from_user.id)
            ProfileService.save_ai_session(user_id, data)

            await message.answer(
                f"üéâ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò:</b>\n\n{recommendations}",
                reply_markup=get_ai_results_kb(),
                parse_mode="HTML"
            )

            await state.set_state(CareerStates.show_results)

        except Exception as e:
            await typing_message.delete()
            await message.answer(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç!",
                reply_markup=get_mode_selection_kb(False)
            )
    @dp.message(CommandStart())
    async def cmd_start(message: types.Message, state: FSMContext):
        await state.clear()
        ai_status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if await is_openai_available() else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        await message.answer(
            "üöÄ <b>–ö–∞—Ä—å–µ—Ä–Ω—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫ v2.0</b>\n\n"
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é! üéØ\n\n"
            "üÜï <b>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π\n"
            "‚Ä¢ –¢–æ–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
            "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö\n"
            "‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n"
            f"ü§ñ –ò–ò-—Ä–µ–∂–∏–º: {ai_status}\n\n"
            "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
            reply_markup=get_main_menu_kb(),
            parse_mode="HTML"
        )
        await state.set_state(CareerStates.main_menu)

    @dp.message(CareerStates.main_menu)
    async def handle_main_menu(message: types.Message, state: FSMContext):
        text = message.text

        if "üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç" in text:
            await choose_test_mode(message, state)
        elif "üìä –¢–æ–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–π" in text:
            await show_top_professions(message, state)
        elif "üí∞ –ü–æ –∑–∞—Ä–ø–ª–∞—Ç–µ" in text:
            await show_salary_filter(message, state)
        elif "üìö –ü–æ–ª–µ–∑–Ω–æ–µ" in text:
            await show_useful_info(message, state)
        elif "‚ÑπÔ∏è –û –±–æ—Ç–µ" in text:
            await show_about(message, state)

    async def choose_test_mode(message: types.Message, state: FSMContext):
        ai_available = await is_openai_available()
        await message.answer(
            "üéØ <b>–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
            "üìã <b>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç</b> - –±—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –≥–æ—Ç–æ–≤—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏\n\n"
            "ü§ñ <b>–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç</b> - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –±–µ—Å–µ–¥–∞ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n\n"
            f"{'‚úÖ –í—Å–µ —Ä–µ–∂–∏–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã!' if ai_available else '‚ö†Ô∏è –ò–ò-—Ä–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}",
            reply_markup=get_mode_selection_kb(ai_available),
            parse_mode="HTML"
        )
        await state.set_state(CareerStates.choosing_mode)

    @dp.message(CareerStates.choosing_mode)
    async def handle_mode_selection(message: types.Message, state: FSMContext):
        text = message.text

        if "‚¨ÖÔ∏è" in text:
            return await cmd_start(message, state)
        elif "üìã –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π" in text:
            await start_classic_test(message, state)
        elif "ü§ñ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç" in text:
            await start_ai_chat(message, state)
        else:
            await message.answer("‚ùå –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤!",
                                 reply_markup=get_mode_selection_kb(await is_openai_available()))

    async def start_classic_test(message: types.Message, state: FSMContext):
        await state.update_data(mode="classic")
        await message.answer(
            "üìã <b>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç</b>\n\n"
            "–û—Ç–≤–µ—á—É –Ω–∞ 4 –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!\n\n"
            "üî∏ –î–ª—è –∫–æ–≥–æ –∏—â–µ—à—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é?",
            reply_markup=get_audience_kb(),
            parse_mode="HTML"
        )
        await state.set_state(CareerStates.choosing_audience)

    async def start_ai_chat(message: types.Message, state: FSMContext):
        if not await is_openai_available():
            await message.answer(
                "üòî –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç!",
                reply_markup=get_mode_selection_kb(False)
            )
            return

        await state.update_data(mode="ai", ai_context=[], user_info={})
        await message.answer(
            "ü§ñ <b>–ò–ò-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–µ</b>\n\n"
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.\n\n"
            "–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, –Ω–∞–≤—ã–∫–∞—Ö –∏ —Ü–µ–ª—è—Ö. –Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
            "üí¨ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:\n"
            "‚Ä¢ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?\n"
            "‚Ä¢ –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã?\n"
            "‚Ä¢ –ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n\n"
            "–ü–∏—à–∏ —Å–≤–æ–±–æ–¥–Ω–æ, –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ! üòä",
            reply_markup=get_ai_chat_kb(),
            parse_mode="HTML"
        )
        await state.set_state(CareerStates.ai_chat)

    @dp.message(CareerStates.ai_chat)
    async def handle_ai_chat(message: types.Message, state: FSMContext):
        if "‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞" in message.text:
            return await choose_test_mode(message, state)

        if "üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" in message.text:
            await generate_ai_recommendations(message, state)
            return

        typing_message = await message.answer("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

        try:
            data = await state.get_data()
            context = data.get("ai_context", [])

            context.append({"role": "user", "content": message.text})

            ai_response = await get_ai_career_recommendation(context, mode="chat")

            context.append({"role": "assistant", "content": ai_response})

            await state.update_data(ai_context=context)

            await typing_message.delete()
            await message.answer(
                f"ü§ñ {ai_response}",
                reply_markup=get_ai_chat_kb(),
                parse_mode="HTML"
            )

        except Exception as e:
            await typing_message.delete()
            await message.answer(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏ –∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º—É —Ç–µ—Å—Ç—É.",
                reply_markup=get_ai_chat_kb()
            )

    async def generate_ai_recommendations(message: types.Message, state: FSMContext):
        typing_message = await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞—à—É –±–µ—Å–µ–¥—É –∏ –ø–æ–¥–±–∏—Ä–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏...")

        try:
            data = await state.get_data()
            context = data.get("ai_context", [])

            if len(context) < 2:
                await typing_message.delete()
                await message.answer(
                    "üìù –ú–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–±–µ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, –Ω–∞–≤—ã–∫–∞—Ö –∏ —Ü–µ–ª—è—Ö.",
                    reply_markup=get_ai_chat_kb()
                )
                return

            recommendations = await get_ai_career_recommendation(context, mode="recommend")

            await typing_message.delete()

            await state.update_data(ai_recommendations=recommendations)

            await message.answer(
                f"üéâ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò:</b>\n\n{recommendations}",
                reply_markup=get_ai_results_kb(),
                parse_mode="HTML"
            )

            await state.set_state(CareerStates.show_results)

        except Exception as e:
            await typing_message.delete()
            await message.answer(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç!",
                reply_markup=get_mode_selection_kb(False)
            )

    async def start_test(message: types.Message, state: FSMContext):
        await state.update_data(test_start_time=datetime.now().isoformat())
        
        await message.answer(
            "üìã <b>–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç</b>\n\n"
            "–û—Ç–≤–µ—á—É –Ω–∞ 4 –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!\n\n"
            "üî∏ –î–ª—è –∫–æ–≥–æ –∏—â–µ—à—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é?",
            reply_markup=get_audience_kb(),
            parse_mode="HTML"
        )
        await state.set_state(CareerStates.choosing_audience)

    async def show_top_professions(message: types.Message, state: FSMContext):
        await message.answer(
            "üìä <b>–¢–æ–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=get_top_professions_kb(),
            parse_mode="HTML"
        )

    async def show_salary_filter(message: types.Message, state: FSMContext):
        await message.answer(
            "üí∞ <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å:",
            reply_markup=get_salary_filter_kb(),
            parse_mode="HTML"
        )

    async def show_useful_info(message: types.Message, state: FSMContext):
        await message.answer(
            "üìö <b>–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
            "–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=get_useful_kb(),
            parse_mode="HTML"
        )

    async def show_about(message: types.Message, state: FSMContext):
        stats = professions_service.get_profession_stats()
        ai_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if await is_openai_available() else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        it_count = stats.get('categories', {}).get('üíª IT', 0)

        await message.answer(
            f"‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n\n"
            f"ü§ñ –ö–∞—Ä—å–µ—Ä–Ω—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫ v2.0\n"
            f"üìä –ü—Ä–æ—Ñ–µ—Å—Å–∏–π –≤ –±–∞–∑–µ: {stats['total']}\n"
            f"üíª IT-–ø—Ä–æ—Ñ–µ—Å—Å–∏–π: {it_count}\n"
            f"üöÄ –†–∞—Å—Ç—É—â–∏—Ö —Å—Ñ–µ—Ä: {stats['high_growth']}\n"
            f"üë• –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª—é–¥—å–º–∏: {stats['with_people']}\n"
            f"üß† –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç: {ai_status}\n\n"
            f"–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –º–µ—á—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤!",
            parse_mode="HTML"
        )

    @dp.callback_query(F.data.startswith("top_"))
    async def handle_top_categories(callback: types.CallbackQuery):
        category = callback.data.split("_")[1]

        if category == "growth":
            profs = [p for p in professions_service.get_all_professions() if "üöÄ" in p["growth"]][:5]
            title = "üöÄ –ë—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"
        elif category == "people":
            profs = [p for p in professions_service.get_all_professions() if p["with_people"]][:5]
            title = "üë• –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª—é–¥—å–º–∏"
        elif category == "it":
            profs = professions_service.get_professions_by_category("üíª IT")[:5]
            title = "üíª IT-–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"
        elif category == "creative":
            profs = professions_service.get_professions_by_category("üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ")[:5]
            title = "üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"

        text = f"<b>{title}</b>\n\n"
        for i, prof in enumerate(profs, 1):
            text += f"{i}. <b>{prof['name']}</b>\n"
            text += f"   üí∞ {prof['salary']} | {prof['growth']}\n\n"

        await callback.message.edit_text(text, parse_mode="HTML")

    @dp.callback_query(F.data.startswith("salary_"))
    async def handle_salary_filter(callback: types.CallbackQuery):
        filter_type = callback.data.split("_")[1]
        all_professions = professions_service.get_all_professions()

        if filter_type == "50":
            filtered = [p for p in all_professions if "80,000" in p["salary"] or "100,000" in p["salary"] or "120,000" in p[
                "salary"] or "–Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" in p["salary"]]
        elif filter_type == "80":
            filtered = [p for p in all_professions if
                        "100,000" in p["salary"] or "120,000" in p["salary"] or "–Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" in p["salary"]]
        elif filter_type == "100":
            filtered = [p for p in all_professions if "120,000" in p["salary"] or "–Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" in p["salary"]]
        else:  # all
            filtered = sorted(all_professions, key=lambda x: x["salary"], reverse=True)[:6]

        text = f"üí∞ <b>–í—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏</b>\n\n"
        for i, prof in enumerate(filtered[:5], 1):
            text += f"{i}. <b>{prof['name']}</b>\n"
            text += f"   üí∞ {prof['salary']}\n"
            text += f"   üìã {prof['desc'][:50]}...\n\n"

        await callback.message.edit_text(text, parse_mode="HTML")

    @dp.callback_query(F.data.startswith("job_tips"))
    async def show_job_tips(callback: types.CallbackQuery):
        back_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ª–µ–∑–Ω–æ–º—É", callback_data="back_to_useful")]
        ])

        tips = [
            "üéØ –û–ø—Ä–µ–¥–µ–ª–∏ —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã",
            "üìù –°–æ—Å—Ç–∞–≤—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ",
            "üîç –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ –ø–æ–∏—Å–∫–∞",
            "ü§ù –†–∞–∑–≤–∏–≤–∞–π networking",
            "üìö –ü–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á–∏—Å—å –Ω–æ–≤–æ–º—É",
            "üí™ –ù–µ –±–æ–π—Å—è —Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫"
        ]

        text = "üí° <b>–°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã:</b>\n\n"
        for tip in tips:
            text += f"‚Ä¢ {tip}\n"
        text += "\nüöÄ –ì–ª–∞–≤–Ω–æ–µ - –Ω–µ —Å–¥–∞–≤–∞–π—Å—è!"

        await callback.message.edit_text(text, reply_markup=back_kb, parse_mode="HTML")

    @dp.callback_query(F.data == "free_courses")
    async def show_free_courses(callback: types.CallbackQuery):
        back_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ª–µ–∑–Ω–æ–º—É", callback_data="back_to_useful")]
        ])

        await callback.message.edit_text(
            "üéì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã:</b>\n\n"
            "üíª <b>–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
            "‚Ä¢ –Ø–Ω–¥–µ–∫—Å.–ü—Ä–∞–∫—Ç–∏–∫—É–º (–ø–µ—Ä–≤—ã–µ —É—Ä–æ–∫–∏)\n"
            "‚Ä¢ freeCodeCamp\n"
            "‚Ä¢ Codecademy\n\n"
            "üé® <b>–î–∏–∑–∞–π–Ω:</b>\n"
            "‚Ä¢ Figma Academy\n"
            "‚Ä¢ Adobe Creative Cloud tutorials\n\n"
            "üíº <b>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥:</b>\n"
            "‚Ä¢ Google Digital Marketing\n"
            "‚Ä¢ HubSpot Academy\n\n"
            "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n"
            "‚Ä¢ Google Analytics Academy\n"
            "‚Ä¢ Coursera Data Science",
            reply_markup=back_kb,
            parse_mode="HTML"
        )

    @dp.message(CareerStates.choosing_audience)
    async def process_audience(message: types.Message, state: FSMContext):
        if "‚¨ÖÔ∏è" in message.text:
            return await choose_test_mode(message, state)

        text = message.text.lower()
        if "–ø–æ–¥—Ä–æ—Å—Ç–æ–∫" in text:
            audience = "teen"
        elif "–≤–∑—Ä–æ—Å–ª—ã–π" in text:
            audience = "adult"
        else:
            await message.answer("‚ùå –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!", reply_markup=get_audience_kb())
            return

        await state.update_data(audience=audience)
        await message.answer("üéØ –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å—Ñ–µ—Ä—É:", reply_markup=get_interest_kb(), parse_mode="HTML")
        await state.set_state(CareerStates.choosing_interest)

    @dp.message(CareerStates.choosing_interest)
    async def process_interest(message: types.Message, state: FSMContext):
        if "‚¨ÖÔ∏è" in message.text:
            return await start_classic_test(message, state)

        valid_interests = [
            "üíª IT", "üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ", "üíº –ë–∏–∑–Ω–µ—Å", "üè• –ú–µ–¥–∏—Ü–∏–Ω–∞", "‚öôÔ∏è –ò–Ω–∂–µ–Ω–µ—Ä–∏—è", "üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
            "üçΩÔ∏è –ì–æ—Å—Ç–∏–Ω–∏—Ü—ã –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "‚úàÔ∏è –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üì∞ –ú–µ–¥–∏–∞", "üè´ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞",
            "üîß –¢–µ—Ö–Ω–∏–∫–∞", "üå± –ù–∞—É–∫–∞", "üé≠ –ò—Å–∫—É—Å—Å—Ç–≤–æ", "üåç –ù–∞—É–∫–∞", "üöÜ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üöí –°–ª—É–∂–±—ã",
            "üå≥ –°–µ—Ä–≤–∏—Å", "üç∞ –ì–æ—Å—Ç–∏–Ω–∏—Ü—ã –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "‚öóÔ∏è –ù–∞—É–∫–∞", "üèãÔ∏è –°–ø–æ—Ä—Ç", "üì¨ –°–µ—Ä–≤–∏—Å",
            "üö¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üç£ –ì–æ—Å—Ç–∏–Ω–∏—Ü—ã –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã"
        ]
        if message.text not in valid_interests:
            await message.answer("‚ùå –í—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!", reply_markup=get_interest_kb())
            return

        await state.update_data(interest=message.text)
        await message.answer("ü§ù –° –∫–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å?", reply_markup=get_people_tech_kb(), parse_mode="HTML")
        await state.set_state(CareerStates.choosing_people_tech)

    @dp.message(CareerStates.choosing_people_tech)
    async def process_people_tech(message: types.Message, state: FSMContext):
        if "‚¨ÖÔ∏è" in message.text:
            await message.answer("üéØ –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å—Ñ–µ—Ä—É:", reply_markup=get_interest_kb())
            return await state.set_state(CareerStates.choosing_interest)

        with_people = "–ª—é–¥—å–º–∏" in message.text.lower()
        await state.update_data(with_people=with_people)
        await message.answer("üí™ –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–∏—Å–∫–∞–º?", reply_markup=get_risk_kb(), parse_mode="HTML")
        await state.set_state(CareerStates.choosing_risk)

    @dp.message(CareerStates.choosing_risk)
    async def process_risk(message: types.Message, state: FSMContext):
        if "‚¨ÖÔ∏è" in message.text:
            await message.answer("ü§ù –° –∫–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å?", reply_markup=get_people_tech_kb())
            return await state.set_state(CareerStates.choosing_people_tech)

        risk = "—Ä–∏—Å–∫—É" in message.text.lower()
        await state.update_data(risk=risk)
        await show_classic_results(message, state)

    async def show_classic_results(message: types.Message, state: FSMContext):
        data = await state.get_data()
        professions = professions_service.get_professions_by_preferences(
            audience=data["audience"], 
            category=data["interest"],
            with_people=data["with_people"], 
            risk=data["risk"]
        )

        if not professions:
            await message.answer("üòî –ù–µ –Ω–∞—à—ë–ª —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ –æ—Ç–≤–µ—Ç—ã!", reply_markup=get_final_kb())
            return

        await state.update_data(results=professions)

        user_id = str(message.from_user.id)
        try:
            ProfileService.save_test_result(user_id, "classic", professions, data)
            print(f"‚úÖ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")

        profile = ProfileService.get_user_profile(user_id)
        unlocked_achievements = AchievementsService.check_test_achievements(
            user_id, profile['stats']['total_tests']
        )

        test_time = datetime.now()
        test_duration = data.get('test_start_time')
        if test_duration:
            duration = int((test_time - datetime.fromisoformat(test_duration)).total_seconds())
        else:
            duration = None
            
        special_achievements = AchievementsService.check_special_achievements(
            user_id, test_time, duration
        )
        
        unlocked_achievements.extend(special_achievements)

        result_text = f"üéâ <b>–¢–≤–æ–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:</b>\n\n"
        for i, prof in enumerate(professions[:2], 1):
            result_text += f"<b>{i}. {prof['name']}</b>\n"
            result_text += f"üí∞ {prof['salary']} | {prof['growth']}\n"
            result_text += f"üìã {prof['desc']}\n\n"

        await message.answer(result_text, reply_markup=get_final_kb(), parse_mode="HTML")

        for achievement in unlocked_achievements:
            achievement_text = AchievementsService.format_achievement_notification(achievement)
            await message.answer(achievement_text, parse_mode="HTML")
        
        await state.set_state(CareerStates.show_results)


    async def generate_ai_recommendations(message: types.Message, state: FSMContext):
        typing_message = await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞—à—É –±–µ—Å–µ–¥—É –∏ –ø–æ–¥–±–∏—Ä–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏...")

        try:
            data = await state.get_data()
            context = data.get("ai_context", [])

            if len(context) < 2:
                await typing_message.delete()
                await message.answer(
                    "üìù –ú–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–±–µ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, –Ω–∞–≤—ã–∫–∞—Ö –∏ —Ü–µ–ª—è—Ö.",
                    reply_markup=get_ai_chat_kb()
                )
                return

            recommendations = await get_ai_career_recommendation(context, mode="recommend")
            await typing_message.delete()
            await state.update_data(ai_recommendations=recommendations)

            user_id = str(message.from_user.id)
            try:
                session_data = {
                    "context": context,
                    "recommendations": recommendations,
                    "timestamp": datetime.now().isoformat()
                }
                ProfileService.save_ai_session(user_id, session_data)
                print(f"‚úÖ –ò–ò-—Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ò–ò-—Å–µ—Å—Å–∏–∏: {e}")

            profile = ProfileService.get_user_profile(user_id)
            unlocked_achievements = AchievementsService.check_ai_achievements(
                user_id, profile['stats']['ai_consultations']
            )

            await message.answer(
                f"üéâ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò:</b>\n\n{recommendations}",
                reply_markup=get_ai_results_kb(),
                parse_mode="HTML"
            )

            for achievement in unlocked_achievements:
                achievement_text = AchievementsService.format_achievement_notification(achievement)
                await message.answer(achievement_text, parse_mode="HTML")

            await state.set_state(CareerStates.show_results)

        except Exception as e:
            await typing_message.delete()
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            await message.answer(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç!",
                reply_markup=get_mode_selection_kb(False)
            )

    @dp.callback_query(F.data == "details")
    async def show_details(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        results = data.get("results", [])

        details_text = "üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
        for prof in results[:2]:
            details_text += f"<b>{prof['name']}</b>\n"
            details_text += f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {prof['salary']}\n"
            details_text += f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {prof['education']}\n"
            details_text += f"‚ö° –ù–∞–≤—ã–∫–∏: {', '.join(prof['skills'])}\n"
            details_text += f"üìà –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã: {prof['growth']}\n\n"

        await callback.message.edit_text(details_text, parse_mode="HTML")

    @dp.callback_query(F.data == "courses")
    async def show_courses_info(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        results = data.get("results", [])

        courses_text = "üìñ <b>–ì–¥–µ —É—á–∏—Ç—å—Å—è:</b>\n\n"
        for prof in results[:2]:
            courses_text += f"<b>{prof['name']}:</b>\n"
            for course in prof.get('courses', ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è']):
                courses_text += f"‚Ä¢ {course}\n"
            courses_text += "\n"

        await callback.message.edit_text(courses_text, parse_mode="HTML")

    @dp.callback_query(F.data == "save")
    async def save_results(callback: types.CallbackQuery, state: FSMContext):
        await callback.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        await callback.message.edit_text(
            "üíæ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!</b>\n\n"
            "–ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é: /start",
            parse_mode="HTML"
        )

    @dp.callback_query(F.data == "restart")
    async def restart_test(callback: types.CallbackQuery, state: FSMContext):
        await callback.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        await cmd_start(callback.message, state)

    @dp.callback_query(F.data == "ai_continue")
    async def ai_continue_chat(callback: types.CallbackQuery):
        await callback.message.edit_text(
            "ü§ñ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ—Å–µ–¥—É! –†–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Å–µ–±–µ –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.",
            reply_markup=get_ai_chat_kb(),
            parse_mode="HTML"
        )

    @dp.callback_query(F.data == "ai_new_chat")
    async def ai_new_chat(callback: types.CallbackQuery, state: FSMContext):
        await state.update_data(ai_context=[], user_info={})
        await callback.message.edit_text(
            "üÜï –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É! –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö.",
            reply_markup=get_ai_chat_kb(),
            parse_mode="HTML"
        )

    @dp.message(Command("help"))
    async def cmd_help(message: types.Message):
        await message.answer(
            "üìö <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üéØ <b>–§—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ç–µ—Å—Ç\n"
            "‚Ä¢ ü§ñ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç (NEW!)\n"
            "‚Ä¢ –¢–æ–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–π\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ\n"
            "‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            parse_mode="HTML"
        )

    @dp.message(Command("stats"))
    async def cmd_stats(message: types.Message):
        stats = professions_service.get_profession_stats()
        users_online = random.randint(45, 89)
        tests_today = random.randint(120, 250)
        ai_requests = random.randint(50, 150)

        await message.answer(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {users_online}\n"
            f"üìã –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {tests_today}\n"
            f"ü§ñ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {ai_requests}\n"
            f"üéØ –í—Å–µ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: {stats['total']}\n"
            f"üíª IT-–ø—Ä–æ—Ñ–µ—Å—Å–∏–π: {stats['it_count']}\n"
            f"üìà –†–∞—Å—Ç—É—â–∏—Ö —Å—Ñ–µ—Ä: {stats['high_growth']}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: –Ω—É –¥–æ–ø—É—Å—Ç–∏–º 4.9/5.0\n"
            f"üöÄ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: 94%",
            parse_mode="HTML"
        )

    @dp.message()
    async def handle_unknown(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state is None:
            await message.answer(
                "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é... –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!",
                reply_markup=get_main_menu_kb()
            )

    @dp.callback_query(F.data == "back_to_useful")
    async def back_to_useful_menu(callback: types.CallbackQuery):
        await callback.message.edit_text(
            "üìö <b>–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
            "–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=get_useful_kb(),
            parse_mode="HTML"
        )

    @dp.callback_query(F.data == "back_to_profile")
    async def back_to_profile_menu(callback: types.CallbackQuery):
        user_id = str(callback.from_user.id)
        profile = ProfileService.get_user_profile(user_id)
        
        profile_text = f"""üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç - {callback.from_user.first_name}</b>

üìÖ –° –Ω–∞–º–∏ —Å: {datetime.fromisoformat(profile['created_at']).strftime('%d.%m.%Y')}
üéØ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {profile['stats']['total_tests']}
ü§ñ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {profile['stats']['ai_consultations']}
‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: {len(profile['favorites'])}

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"""

        await callback.message.edit_text(
            profile_text,
            reply_markup=get_profile_kb(),
            parse_mode="HTML"
        )

    @dp.callback_query(F.data == "profile_achievements")
    async def show_profile_achievements(callback: types.CallbackQuery):
        user_id = str(callback.from_user.id)

        achievements = AchievementsService.get_user_achievements(user_id)
        stats = AchievementsService.get_achievements_stats(user_id)

        achievements_text = AchievementsService.format_achievements_list(achievements)

        stats_text = f"\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:</b>\n"
        stats_text += f"üèÜ –í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {stats['total_achievements']}\n"
        
        if stats['categories']:
            stats_text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
            for category, count in stats['categories'].items():
                stats_text += f"   ‚Ä¢ {category}: {count}\n"
        
        if stats['last_achievement']:
            last_date = datetime.fromisoformat(stats['last_achievement']['unlocked_at']).strftime("%d.%m.%Y")
            stats_text += f"\nüéâ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n"
            stats_text += f"   {stats['last_achievement']['icon']} {stats['last_achievement']['name']}\n"
            stats_text += f"   üìÖ {last_date}"
        
        full_text = achievements_text + stats_text

        back_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")]
        ])
        
        await callback.message.edit_text(
            full_text,
            reply_markup=back_kb,
            parse_mode="HTML"
        )