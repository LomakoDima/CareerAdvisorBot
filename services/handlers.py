from aiogram import types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command
from .keyboards import *
from .professions import PROFESSIONS
import json
import time


class CareerStates(StatesGroup):
    choosing_audience = State()
    choosing_interest = State()
    choosing_people_tech = State()
    choosing_risk = State()
    show_results = State()


def register_handlers(dp, bot):
    @dp.message(CommandStart())
    async def cmd_start(message: types.Message, state: FSMContext):
        await state.clear()
        await message.answer(
            "üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –°–æ–≤–µ—Ç–Ω–∏–∫–∞!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –º–µ—á—Ç—ã –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç!\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ 4 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ üìã\n\n"
            "<i>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–æ–Ω–∏–º–Ω—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã</i>\n\n"
            "üî∏ –î–ª—è –∫–æ–≥–æ —Ç—ã –∏—â–µ—à—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é?",
            reply_markup=get_audience_kb(),
            parse_mode="HTML"
        )
        await state.set_state(CareerStates.choosing_audience)

    @dp.message(Command("help"))
    async def cmd_help(message: types.Message):
        await message.answer(
            "üìö <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "ü§ñ –ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π!",
            parse_mode="HTML"
        )

    @dp.message(Command("stats"))
    async def cmd_stats(message: types.Message):
        await message.answer(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {message.from_user.id % 100 + 15}\n"
            f"üìã –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {message.from_user.id % 500 + 150}\n"
            f"üéØ –ü—Ä–æ—Ñ–µ—Å—Å–∏–π –≤ –±–∞–∑–µ: {len(PROFESSIONS)}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: 4.8/5.0",
            parse_mode="HTML"
        )

    @dp.message(CareerStates.choosing_audience)
    async def process_audience(message: types.Message, state: FSMContext):
        text = message.text.lower()
        if "–ø–æ–¥—Ä–æ—Å—Ç–æ–∫" in text:
            audience = "teen"
        elif "–≤–∑—Ä–æ—Å–ª—ã–π" in text:
            audience = "adult"
        else:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!",
                                 reply_markup=get_audience_kb())
            return

        await state.update_data(audience=audience)
        await message.answer(
            "üéØ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç:",
            reply_markup=get_interest_kb(),
            parse_mode="HTML"
        )
        await state.set_state(CareerStates.choosing_interest)

    @dp.message(CareerStates.choosing_interest)
    async def process_interest(message: types.Message, state: FSMContext):
        valid_interests = ["üíª IT", "üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ", "üíº –ë–∏–∑–Ω–µ—Å", "üè• –ú–µ–¥–∏—Ü–∏–Ω–∞", "‚öôÔ∏è –ò–Ω–∂–µ–Ω–µ—Ä–∏—è", "üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"]

        if message.text not in valid_interests:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ñ–µ—Ä!",
                                 reply_markup=get_interest_kb())
            return

        await state.update_data(interest=message.text)
        await message.answer(
            "ü§ù <b>–°—É–ø–µ—Ä!</b>\n\n"
            "–° –∫–µ–º –∏–ª–∏ —á–µ–º —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å?",
            reply_markup=get_people_tech_kb(),
            parse_mode="HTML"
        )
        await state.set_state(CareerStates.choosing_people_tech)

    @dp.message(CareerStates.choosing_people_tech)
    async def process_people_tech(message: types.Message, state: FSMContext):
        text = message.text.lower()
        if "–ª—é–¥—å–º–∏" in text:
            with_people = True
        elif "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏" in text:
            with_people = False
        else:
            await message.answer("‚ùå –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!",
                                 reply_markup=get_people_tech_kb())
            return

        await state.update_data(with_people=with_people)
        await message.answer(
            "üí™ <b>–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</b>\n\n"
            "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: –∫–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ —Ä–∏—Å–∫–∞–º –≤ –∫–∞—Ä—å–µ—Ä–µ?",
            reply_markup=get_risk_kb(),
            parse_mode="HTML"
        )
        await state.set_state(CareerStates.choosing_risk)

    @dp.message(CareerStates.choosing_risk)
    async def process_risk(message: types.Message, state: FSMContext):
        text = message.text.lower()
        if "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å" in text:
            risk = False
        elif "—Ä–∏—Å–∫—É" in text:
            risk = True
        else:
            await message.answer("‚ùå –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!",
                                 reply_markup=get_risk_kb())
            return

        await state.update_data(risk=risk)
        await show_results(message, state)

    async def show_results(message: types.Message, state: FSMContext):
        data = await state.get_data()

        # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
        perfect_matches = [
            p for p in PROFESSIONS
            if p["category"] == data["interest"]
               and data["audience"] in p["audience"]
               and p["with_people"] == data["with_people"]
               and p["risk"] == data["risk"]
        ]

        # –ï—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç, –∏—â–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        if not perfect_matches:
            good_matches = [
                p for p in PROFESSIONS
                if p["category"] == data["interest"]
                   and data["audience"] in p["audience"]
            ]
            professions = good_matches[:2]
            match_quality = "—Ö–æ—Ä–æ—à–∏–µ"
        else:
            professions = perfect_matches[:2]
            match_quality = "–∏–¥–µ–∞–ª—å–Ω—ã–µ"

        if not professions:
            await message.answer(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π.\n"
                "–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ —Å –¥—Ä—É–≥–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏!",
                reply_markup=get_final_kb()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(results=professions)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
        result_text = f"üéâ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\n"
        result_text += f"–ù–∞–π–¥–µ–Ω—ã <b>{match_quality} —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è</b> –¥–ª—è —Ç–µ–±—è:\n\n"

        for i, prof in enumerate(professions, 1):
            result_text += f"<b>{i}. {prof['name']}</b>\n"
            result_text += f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {prof['salary']}\n"
            result_text += f"üìã {prof['desc']}\n\n"

        result_text += "üí° <i>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:</i>"

        await message.answer(
            result_text,
            reply_markup=get_final_kb(),
            parse_mode="HTML"
        )
        await state.set_state(CareerStates.show_results)

    @dp.callback_query(F.data == "save")
    async def save_results(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        user_data = {
            "user_id": callback.from_user.id,
            "timestamp": int(time.time()),
            "results": data.get("results", [])
        }

        await callback.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        await callback.message.edit_text(
            "üíæ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!</b>\n\n"
            "–¢—ã –º–æ–∂–µ—à—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è:\n"
            "‚Ä¢ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ (/start)\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É (/help)\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (/stats)",
            parse_mode="HTML"
        )

    @dp.callback_query(F.data == "restart")
    async def restart_test(callback: types.CallbackQuery, state: FSMContext):
        await callback.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç...")
        await cmd_start(callback.message, state)

    @dp.callback_query(F.data == "details")
    async def show_details(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        results = data.get("results", [])

        if not results:
            await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        details_text = "üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"

        for prof in results:
            details_text += f"<b>{prof['name']}</b>\n"
            details_text += f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {prof['salary']}\n"
            details_text += f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {prof['education']}\n"
            details_text += f"‚ö° –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(prof['skills'])}\n"
            details_text += f"üìã {prof['desc']}\n\n"

        await callback.answer()
        await callback.message.answer(details_text, parse_mode="HTML")

    @dp.message(CareerStates.show_results)
    async def handle_final_text(message: types.Message, state: FSMContext):
        await message.answer(
            "üîò –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º!",
            reply_markup=get_final_kb()
        )