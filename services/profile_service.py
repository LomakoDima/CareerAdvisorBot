from datetime import datetime
from typing import Dict, List, Any
from database.database_service import db_service


class ProfileService:

    @staticmethod
    def get_user_profile(user_id: str) -> Dict:
        return db_service.get_user_profile(user_id)

    @staticmethod
    def save_test_result(user_id: str, test_type: str, results: List[Dict], preferences: Dict = None):
        db_service.save_test_result(user_id, test_type, results, preferences)

    @staticmethod
    def save_ai_session(user_id: str, session_data: Dict):
        db_service.save_ai_session(user_id, session_data)

    @staticmethod
    def add_to_favorites(user_id: str, profession: Dict) -> bool:
        return db_service.add_to_favorites(user_id, profession)

    @staticmethod
    def clear_profile(user_id: str):
        db_service.clear_profile(user_id)

    @staticmethod
    def get_profile_stats(user_id: str) -> str:
        profile = db_service.get_user_profile(user_id)
        stats = profile["stats"]

        top_category = "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"
        if stats["favorite_categories"]:
            top_category = max(stats["favorite_categories"], key=stats["favorite_categories"].get)

        created = datetime.fromisoformat(profile["created_at"])
        days_active = (datetime.now() - created).days

        achievements_stats = db_service.get_achievements_stats(user_id)

        stats_text = f"""üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

üéØ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {stats['total_tests']}
ü§ñ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {stats['ai_consultations']}
‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: {len(profile['favorites'])}
üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {achievements_stats['total_achievements']}

üìÖ –î–Ω–µ–π —Å –Ω–∞–º–∏: {days_active}

üèÜ –¢–≤–æ—è –ª—é–±–∏–º–∞—è —Å—Ñ–µ—Ä–∞: {top_category}

üí° –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(profile['test_results'])}

üóÑÔ∏è <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> SQLite (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ)"""

        return stats_text

    @staticmethod
    def get_recent_results(user_id: str, limit: int = 3) -> str:
        profile = db_service.get_user_profile(user_id)
        results = profile["test_results"][:limit]  # –£–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ

        if not results:
            return "üìù –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤. –ü—Ä–æ–π–¥–∏ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç!"

        results_text = "üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n\n"

        for i, result in enumerate(results, 1):
            date = datetime.fromisoformat(result["date"]).strftime("%d.%m.%Y %H:%M")
            test_type = "ü§ñ –ò–ò-—Ç–µ—Å—Ç" if result["type"] == "ai" else "üìã –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π"

            results_text += f"{i}. {test_type} ({date})\n"

            for j, prof in enumerate(result["results"][:2], 1):
                results_text += f"   {j}. {prof['name']} ({prof['category']})\n"
            results_text += "\n"

        return results_text

    @staticmethod
    def get_favorites(user_id: str) -> str:
        profile = db_service.get_user_profile(user_id)
        favorites = profile["favorites"]

        if not favorites:
            return "‚≠ê –ü–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π.\n–î–æ–±–∞–≤–ª—è–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–æ–≤!"

        favorites_text = "‚≠ê <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:</b>\n\n"

        for i, fav in enumerate(favorites, 1):
            added_date = datetime.fromisoformat(fav["added_at"]).strftime("%d.%m")
            favorites_text += f"{i}. <b>{fav['name']}</b>\n"
            favorites_text += f"   {fav['category']} | {fav['salary']}\n"
            favorites_text += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_date}\n\n"

        return favorites_text

    @staticmethod
    def get_database_info() -> str:
        stats = db_service.get_database_stats()

        return f"""üóÑÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:</b>

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üìã –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {stats['total_tests']}
ü§ñ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {stats['total_ai_sessions']}
‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: {stats['total_favorites']}

üíæ –¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è: SQLite (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ)
üîÑ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞"""

    @staticmethod
    def create_backup() -> str:
        backup_path = db_service.backup_database()
        if backup_path:
            return f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}"
        else:
            return "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"


